quit
lights
next
quit
puts i + 1 % interval
puts i + 1
step
puts i + 1
arr
step
next
lights
next
lights
next
lights
next
lights
next
step
quit
puts i % interval
puts v
puts i
next
arr
next
switch(v)
arr.map.with_index do |v, i|
arr
i % interval
i
step
i
v
arr
interval
step
next
lights
next
lights
next
lights
step
quit
counter
next
counter
next
quit
step
arr
step
lights
step
counter
lights
next
counter
lights
next
step
lights
increment_arr(lights, counter)
step
lights.size
counter
step
quit
p
lights
counter
n
increment_arr(lights, counter)
lights.size
counter
lights
puts n
n
quit
to_rotate.reverse
rotate_array(to_rotate.reverse)
rotate_array(to_rotate)
remainder
to_rotate
arr
puts n
puts int
int
continue
reg
continue
reg
continue
reg
continue
reg
continue
reg
continue
reg
continue
reg
continue
reg
quit
reg
continue
reg
quit
end
!!!
reg
command
quit
arr.size
5/2
initialize_diamond(5)
quit
initialize_diamond(5)
arr
quit
mid
add_diamonds(initialize_diamond(3))
initialize_diamond(3)
quit
arr.map { |subarr| subarr.join }
arr.join
arr
quit
arr
continue
arr.join
arr
continue
arr
continue
arr
idx
continue
idx
continue
quit
el
arr
idx
continue
arr
idx
continue
arr
idx
continue
idx
arr
continue
arr
continue
idx
mid
el
puts i
i
arr
quit
continue
bool_arr
continue
el
bool_arr
